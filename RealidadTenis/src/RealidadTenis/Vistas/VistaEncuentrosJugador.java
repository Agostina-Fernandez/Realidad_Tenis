/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package RealidadTenis.Vistas;

import RealidadTenis.Control.EncuentroData;
import RealidadTenis.Control.JugadorData;
import RealidadTenis.Modelo.Encuentro;
import RealidadTenis.Modelo.Jugador;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Agostina
 */
public class VistaEncuentrosJugador extends javax.swing.JInternalFrame {
    private DefaultTableModel modelo = new DefaultTableModel();
    private MenuPrincipal menu;
    private EncuentroData encuentroData;
    private JugadorData jugadorData;
    private ArrayList<Encuentro> encuentros;
    private ArrayList<Encuentro> encuentrosActivos;

    /**
     * Creates new form VistaEncuentrosJugador
     */
    public VistaEncuentrosJugador(MenuPrincipal menu, EncuentroData ed, JugadorData jd) {
        initComponents();
        
        this.menu = menu;
        encuentroData = ed;
        jugadorData = jd;
        
        encuentros = (ArrayList<Encuentro>) encuentroData.obtenerEncuentros();
        encuentrosActivos = (ArrayList<Encuentro>) encuentroData.obtenerEncuentrosActivos();
        
        vaciarTabla();
        armarCabecera();
        llenarTablaTodos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelEncuentrosJugador = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCanchas = new javax.swing.JTable();
        jCheckBoxActivos = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldId = new javax.swing.JTextField();
        jLabelComentario = new javax.swing.JLabel();
        jButtonBuscar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        jLabelEncuentrosJugador.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelEncuentrosJugador.setText("Todos los Encuentros por Jugador");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTableCanchas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableCanchas);

        jCheckBoxActivos.setText("Ver s√≥lo disponibles");
        jCheckBoxActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxActivosActionPerformed(evt);
            }
        });

        jLabel1.setText("ID del Jugador");

        jTextFieldId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldIdFocusLost(evt);
            }
        });

        jLabelComentario.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBoxActivos)
                .addGap(35, 35, 35))
            .addComponent(jLabelComentario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelComentario, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxActivos)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBuscar))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jButton1.setText("Volver");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(86, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(216, 216, 216)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabelEncuentrosJugador)
                        .addGap(175, 175, 175))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(326, 326, 326))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabelEncuentrosJugador)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxActivosActionPerformed
        // TODO add your handling code here:

        vaciarTabla();

        if (jCheckBoxActivos.isSelected()){
            llenarTablaActivos();
        } else {
            llenarTablaTodos();
        }
    }//GEN-LAST:event_jCheckBoxActivosActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        menu.verMunuListados();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        // TODO add your handling code here:
        
        String idString = jTextFieldId.getText();
        int id;
        Jugador jugador;
        
        if (idString == ""){
            llenar();
        }
        
        if (!idString.matches("[0-9]+")){
            JOptionPane.showMessageDialog(this, "Ingrese un ID v√°lido");
        } else {
            id = Integer.parseInt(idString);
            boolean ok = false;
            ArrayList<Jugador> jugadores = (ArrayList<Jugador>) jugadorData.obtenerJugadores();
            
            for (Jugador j : jugadores){
                if (j.getIdJugador() == id){
                    ok = true;
                }
            }
            
            if (!ok) {
                JOptionPane.showMessageDialog(this, "ID no encontrado");
            } else {
                jugador = jugadorData.buscarJugador(id);

                llenar();
                
                jLabelComentario.setText("Encuentros del Jugador " + jugador.getIdJugador() + ", " + jugador.getApellido() + ' ' + jugador.getNombre());
            }
        }
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jTextFieldIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldIdFocusLost
        // TODO add your handling code here:
        
        boolean ok = true;
        String valor = jTextFieldId.getText();
        
        if (!valor.matches("[0-9]+")){
            JOptionPane.showMessageDialog(this, "Ingrese un ID v√°lido");
        }
    }//GEN-LAST:event_jTextFieldIdFocusLost
    
    private void llenar(){
        vaciarTabla();
        
        if (jCheckBoxActivos.isSelected()){
            encuentrosActivos = (ArrayList<Encuentro>) encuentroData.obtenerEncuentrosActivos();
            llenarTablaActivos();
        } else {
            encuentros = (ArrayList<Encuentro>) encuentroData.obtenerEncuentros();
            llenarTablaTodos();
        }
    }
    
    private void vaciarTabla(){
        int filas = modelo.getRowCount() - 1;

        for (int i = filas; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }                                        

    private void armarCabecera(){
        ArrayList<Object> titulos = new ArrayList<>();

        titulos.add("ID");
        titulos.add("Torneo");
        titulos.add("Jugador 1");
        titulos.add("Jugador 2");
        titulos.add("Ganador");
        titulos.add("Resultado Jugador 1");
        titulos.add("Resultado Jugador 2");
        titulos.add("Cancha");
        titulos.add("Fecha");
        titulos.add("Hora");
        titulos.add("Estado");
        titulos.add("Activo");

        for (Object titulo: titulos) {
            modelo.addColumn(titulo);
        }

        jTableCanchas.setModel(modelo);
    }                                        

    private void llenarTablaTodos(){
        vaciarTabla();
        
        for (Encuentro e : encuentros) {
            if (e.getGanador() == null){
                modelo.addRow(new Object[]{e.getIdEncuentro(), e.getTorneo().getNombreCopa(), e.getJugador1().getApellido() + ' ' + e.getJugador1().getNombre(), e.getJugador2().getApellido() + ' ' + e.getJugador2().getNombre(), "Indefinido", e.getResultadoJ1(), e.getResultadoJ2(), e.getCancha().getNumeroCancha(), e.getFecha(), e.getHora(), e.getEstado(), e.isActivo()});
            } else {
                modelo.addRow(new Object[]{e.getIdEncuentro(), e.getTorneo().getNombreCopa(), e.getJugador1().getApellido() + ' ' + e.getJugador1().getNombre(), e.getJugador2().getApellido() + ' ' + e.getJugador2().getNombre(), e.getGanador().getApellido() + ' ' + e.getGanador().getNombre(), e.getResultadoJ1(), e.getResultadoJ2(), e.getCancha().getNumeroCancha(), e.getFecha(), e.getHora(), e.getEstado(), e.isActivo()});
            }
        }
    }                                      

    private void llenarTablaActivos(){
        vaciarTabla();
        
        for (Encuentro e : encuentrosActivos) {
            if (e.getGanador() == null){
                modelo.addRow(new Object[]{e.getIdEncuentro(), e.getTorneo().getNombreCopa(), e.getJugador1().getApellido() + ' ' + e.getJugador1().getNombre(), e.getJugador2().getApellido() + ' ' + e.getJugador2().getNombre(), "Indefinido", e.getResultadoJ1(), e.getResultadoJ2(), e.getCancha().getNumeroCancha(), e.getFecha(), e.getHora(), e.getEstado(), e.isActivo()});
            } else {
                modelo.addRow(new Object[]{e.getIdEncuentro(), e.getTorneo().getNombreCopa(), e.getJugador1().getApellido() + ' ' + e.getJugador1().getNombre(), e.getJugador2().getApellido() + ' ' + e.getJugador2().getNombre(), e.getGanador().getApellido() + ' ' + e.getGanador().getNombre(), e.getResultadoJ1(), e.getResultadoJ2(), e.getCancha().getNumeroCancha(), e.getFecha(), e.getHora(), e.getEstado(), e.isActivo()});
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JCheckBox jCheckBoxActivos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelComentario;
    private javax.swing.JLabel jLabelEncuentrosJugador;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableCanchas;
    private javax.swing.JTextField jTextFieldId;
    // End of variables declaration//GEN-END:variables
}
